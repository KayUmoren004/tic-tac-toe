{"version":3,"sources":["src/utils/CellNames.jsx","src/components/Cell.jsx","src/utils/Wins.jsx","src/components/Column.jsx","src/components/GameBoard.jsx","src/components/GameContainer.jsx","App.js","assets/fonts/Montserrat-Bold.ttf","assets/fonts/Montserrat-Light.ttf"],"names":["LeftColumn","CenterColumn","RightColumn","Cell","input","type","onPress","onPressIn","onPressOut","isDisabled","textColor","otherProps","Pressable","style","styles","LeftTopEdgeCell","LeftMiddleEdgeCell","LeftBottomEdgeCell","CenterTopCell","CenterMiddleCell","CenterBottomCell","RightTopEdgeCell","RightMiddleEdgeCell","RightBottomEdgeCell","CellType","disabled","Text","fontSize","fontFamily","textAlign","color","StyleSheet","create","container","borderColor","height","width","borderLeftWidth","borderRightWidth","borderBottomWidth","borderTopWidth","borderWidth","diagWinCase1","diagWinCase2","horWinCase1","horWinCase2","horWinCase3","vertWinCase1","vertWinCase2","vertWinCase3","Column","score","setScore","players","winner","setWinner","p1Moves","p2Moves","setP1Moves","setP2Moves","setIsDisabled","cellsOccupied","setCellsOccupied","setCurrentCell","currentCell","currentPlayer","setCurrentPlayer","animation","compareArrays","setAnimation","a","b","newArray","i","length","includes","push","every","v","cellPress","checkForWin","cellPressIn","cellName","console","log","cellPressOut","p1","Animated","timing","toValue","duration","useNativeDriver","start","p2","setInput","setTextColor","p1Wins","backgroundColor","interpolate","inputRange","outputRange","flexDirection","borderRadius","p2Wins","tie","View","setBoardColor","map","index","winnerColor","GameBoard","useState","setP1","setP2","Value","p1Score","p2Score","useEffect","fire","title","message","actions","text","name","player1","player2","fields","placeholder","keyboardType","resetGame","SafeAreaView","justifyContent","alignItems","borderBottomColor","padding","flex","borderTopColor","paddingBottom","Platform","OS","TouchableOpacity","button","Button","alignContent","alert","margin","GameContainer","App","useFonts","MontserratBold","require","MontserratLight","module","exports"],"mappings":"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","file":"static/js/app.2c7705f6.chunk.js","sourcesContent":["export const CellNames = [\n  \"LTE\", // Left Top Edge\n  \"LME\", // Left Middle Edge\n  \"LBE\", // Left Bottom Edge\n  \"CTC\", // Center Top Cell\n  \"CMC\", // Center Middle Cell\n  \"CBC\", // Center Bottom Cell\n  \"RTE\", // Right Top Edge\n  \"RME\", // Right Middle Edge\n  \"RBE\", // Right Bottom Edge\n];\n\nexport const LeftColumn = [\n  \"LTE\", // Left Top Edge\n  \"LME\", // Left Middle Edge\n  \"LBE\", // Left Bottom Edge\n];\n\nexport const CenterColumn = [\n  \"CTC\", // Center Top Cell\n  \"CMC\", // Center Middle Cell\n  \"CBC\", // Center Bottom Cell\n];\n\nexport const RightColumn = [\n  \"RTE\", // Right Top Edge\n  \"RME\", // Right Middle Edge\n  \"RBE\", // Right Bottom Edge\n];\n","import React from \"react\";\n\n// Dependencies\nimport { Pressable, StyleSheet, Text, View } from \"react-native\";\n\nconst Cell = ({\n  input,\n  type,\n  onPress,\n  onPressIn,\n  onPressOut,\n  isDisabled,\n  textColor,\n  ...otherProps\n}) => {\n  const CellType = () => {\n    switch (type) {\n      case \"LTE\":\n        return styles.LeftTopEdgeCell;\n\n      case \"LME\":\n        return styles.LeftMiddleEdgeCell;\n\n      case \"LBE\":\n        return styles.LeftBottomEdgeCell;\n\n      case \"CTC\":\n        return styles.CenterTopCell;\n\n      case \"CMC\":\n        return styles.CenterMiddleCell;\n\n      case \"CBC\":\n        return styles.CenterBottomCell;\n\n      case \"RTE\":\n        return styles.RightTopEdgeCell;\n\n      case \"RME\":\n        return styles.RightMiddleEdgeCell;\n\n      case \"RBE\":\n        return styles.RightBottomEdgeCell;\n\n      default:\n        return styles.CenterMiddleCell;\n    }\n  };\n\n  return (\n    <Pressable\n      onPress={onPress}\n      onPressIn={onPressIn}\n      onPressOut={onPressOut}\n      style={CellType()}\n      disabled={isDisabled}\n    >\n      <Text\n        style={{\n          fontSize: 70,\n          fontFamily: \"MontserratBold\",\n          textAlign: \"center\",\n          color: textColor,\n        }}\n        {...otherProps}\n      >\n        {input}\n      </Text>\n    </Pressable>\n  );\n};\n\nexport default Cell;\n\nconst styles = StyleSheet.create({\n  container: {\n    borderColor: \"#fff\",\n    height: 100,\n    width: 100,\n  },\n  input: {\n    fontSize: 70,\n    fontFamily: \"MontserratBold\",\n    textAlign: \"center\",\n  },\n  LeftTopEdgeCell: {\n    borderColor: \"#fff\",\n    borderLeftWidth: 0,\n    borderRightWidth: 5,\n    borderBottomWidth: 5,\n    height: 100,\n    width: 100,\n  },\n  LeftMiddleEdgeCell: {\n    borderColor: \"#fff\",\n    borderLeftWidth: 0,\n    borderRightWidth: 5,\n    borderTopWidth: 5,\n    borderBottomWidth: 5,\n    height: 100,\n    width: 100,\n  },\n  LeftBottomEdgeCell: {\n    borderColor: \"#fff\",\n    borderLeftWidth: 0,\n    borderRightWidth: 5,\n    borderTopWidth: 5,\n    height: 100,\n    width: 100,\n  },\n  RightTopEdgeCell: {\n    borderColor: \"#fff\",\n    borderLeftWidth: 5,\n    borderRightWidth: 0,\n    borderBottomWidth: 5,\n    height: 100,\n    width: 100,\n  },\n  RightMiddleEdgeCell: {\n    borderColor: \"#fff\",\n    borderLeftWidth: 5,\n    borderRightWidth: 0,\n    borderTopWidth: 5,\n    borderBottomWidth: 5,\n    height: 100,\n    width: 100,\n  },\n  RightBottomEdgeCell: {\n    borderColor: \"#fff\",\n    borderLeftWidth: 5,\n    borderRightWidth: 0,\n    borderTopWidth: 5,\n    height: 100,\n    width: 100,\n  },\n  CenterTopCell: {\n    borderColor: \"#fff\",\n    borderLeftWidth: 5,\n    borderRightWidth: 5,\n    borderBottomWidth: 5,\n    height: 100,\n    width: 100,\n  },\n  CenterMiddleCell: {\n    borderColor: \"#fff\",\n    borderWidth: 5,\n    height: 100,\n    width: 100,\n  },\n  CenterBottomCell: {\n    borderColor: \"#fff\",\n    borderLeftWidth: 5,\n    borderRightWidth: 5,\n    borderTopWidth: 5,\n    height: 100,\n    width: 100,\n  },\n});\n","import { LeftColumn, RightColumn, CenterColumn } from \"./CellNames\";\n\n// How to win a game of Tic Tac Toe\n\n// 1 - Diagonally\nexport const diagWinCase1 = [LeftColumn[0], CenterColumn[1], RightColumn[2]];\nexport const diagWinCase2 = [LeftColumn[2], CenterColumn[1], RightColumn[0]];\n\n// 2 - Horizontally\nexport const horWinCase1 = [LeftColumn[0], CenterColumn[0], RightColumn[0]];\nexport const horWinCase2 = [LeftColumn[1], CenterColumn[1], RightColumn[1]];\nexport const horWinCase3 = [LeftColumn[2], CenterColumn[2], RightColumn[2]];\n\n// 3 - Vertically\nexport const vertWinCase1 = [RightColumn[0], RightColumn[1], RightColumn[2]];\nexport const vertWinCase2 = [LeftColumn[0], LeftColumn[1], LeftColumn[2]];\nexport const vertWinCase3 = [CenterColumn[0], CenterColumn[1], CenterColumn[2]];\n\n/*\n// 1 - Diagonally\nexport const diagWinCase1 = [LeftColumn[0]+CenterColumn[1]+RightColumn[2]];\nexport const diagWinCase2 = [LeftColumn[2]+CenterColumn[1]+RightColumn[0]];\n\n// 2 - Horizontally\nexport const horWinCase1 = [LeftColumn[0]+CenterColumn[0]+RightColumn[0]];\nexport const horWinCase2 = [LeftColumn[1]+CenterColumn[1]+RightColumn[1]];\nexport const horWinCase3 = [LeftColumn[2]+CenterColumn[2]+RightColumn[2]];\n\n// 3 - Vertically\nexport const vertWinCase1 = [RightColumn[0]+RightColumn[1]+RightColumn[2]];\nexport const vertWinCase2 = [LeftColumn[0]+LeftColumn[1]+LeftColumn[2]];\nexport const vertWinCase3 = [CenterColumn[0]+CenterColumn[1]+CenterColumn[2]];\n*/\n\n/* \n    // // if player 1 wins\n    // for (let i = 0; i < p1Moves.length - 1; i++) {\n    //   if (\n    //     (p1Moves[i] === diagWinCase1[0] &&\n    //       p1Moves[i + 1] === diagWinCase1[1] &&\n    //       p1Moves[i + 2] === diagWinCase1[2]) ||\n    //     (p1Moves[i] === horWinCase1[0] &&\n    //       p1Moves[i + 1] === horWinCase1[1] &&\n    //       p1Moves[i + 2] === horWinCase1[2]) ||\n    //     (p1Moves[i] === vertWinCase1[0] &&\n    //       p1Moves[i + 1] === vertWinCase1[1] &&\n    //       p1Moves[i + 2] === vertWinCase1[2]) ||\n    //     (p1Moves[i] === diagWinCase2[0] &&\n    //       p1Moves[i + 1] === diagWinCase2[1] &&\n    //       p1Moves[i + 2] === diagWinCase2[2]) ||\n    //     (p1Moves[i] === horWinCase2[0] &&\n    //       p1Moves[i + 1] === horWinCase2[1] &&\n    //       p1Moves[i + 2] === horWinCase2[2]) ||\n    //     (p1Moves[i] === vertWinCase2[0] &&\n    //       p1Moves[i + 1] === vertWinCase2[1] &&\n    //       p1Moves[i + 2] === vertWinCase2[2]) ||\n    //     (p1Moves[i] === diagWinCase3[0] &&\n    //       p1Moves[i + 1] === diagWinCase3[1] &&\n    //       p1Moves[i + 2] === diagWinCase3[2]) ||\n    //     (p1Moves[i] === horWinCase3[0] &&\n    //       p1Moves[i + 1] === horWinCase3[1] &&\n    //       p1Moves[i + 2] === horWinCase3[2]) ||\n    //     (p1Moves[i] === vertWinCase3[0] &&\n    //       p1Moves[i + 1] === vertWinCase3[1] &&\n    //       p1Moves[i + 2] === vertWinCase3[2])\n    //   ) {\n    //     setWinner(players.p1);\n    //     setScore(score.p1 + 1);\n    //     console.log(`${players.p1} has won!`);\n    //     return;\n    //   }\n    // }\n\n    // // if player 2 wins\n\n    // for (let i = 0; i < p2Moves.length - 1; i++) {\n    //   if (\n    //     (p2Moves[i] === diagWinCase1[0] &&\n    //       p2Moves[i + 1] === diagWinCase1[1] &&\n    //       p2Moves[i + 2] === diagWinCase1[2]) ||\n    //     (p2Moves[i] === horWinCase1[0] &&\n    //       p2Moves[i + 1] === horWinCase1[1] &&\n    //       p2Moves[i + 2] === horWinCase1[2]) ||\n    //     (p2Moves[i] === vertWinCase1[0] &&\n    //       p2Moves[i + 1] === vertWinCase1[1] &&\n    //       p2Moves[i + 2] === vertWinCase1[2]) ||\n    //     (p2Moves[i] === diagWinCase2[0] &&\n    //       p2Moves[i + 1] === diagWinCase2[1] &&\n    //       p2Moves[i + 2] === diagWinCase2[2]) ||\n    //     (p2Moves[i] === horWinCase2[0] &&\n    //       p2Moves[i + 1] === horWinCase2[1] &&\n    //       p2Moves[i + 2] === horWinCase2[2]) ||\n    //     (p2Moves[i] === vertWinCase2[0] &&\n    //       p2Moves[i + 1] === vertWinCase2[1] &&\n    //       p2Moves[i + 2] === vertWinCase2[2]) ||\n    //     (p2Moves[i] === diagWinCase3[0] &&\n    //       p2Moves[i + 1] === diagWinCase3[1] &&\n    //       p2Moves[i + 2] === diagWinCase3[2]) ||\n    //     (p2Moves[i] === horWinCase3[0] &&\n    //       p2Moves[i + 1] === horWinCase3[1] &&\n    //       p2Moves[i + 2] === horWinCase3[2]) ||\n    //     (p2Moves[i] === vertWinCase3[0] &&\n    //       p2Moves[i + 1] === vertWinCase3[1] &&\n    //       p2Moves[i + 2] === vertWinCase3[2])\n    //   ) {\n    //     setWinner(players.p2);\n    //     setScore(score.p2 + 1);\n    //     console.log(`${players.p2} has won!`);\n    //     return;\n    //   }\n    // }\n\n*/\n","import React, { useState } from \"react\";\n\n// Dependencies\nimport { StyleSheet, View, Animated } from \"react-native\";\n\nimport { LeftColumn, RightColumn, CenterColumn } from \"../utils/CellNames\";\nimport Cell from \"./Cell\";\n\nimport {\n  diagWinCase1,\n  diagWinCase2,\n  horWinCase1,\n  horWinCase2,\n  horWinCase3,\n  vertWinCase1,\n  vertWinCase2,\n  vertWinCase3,\n} from \"../utils/Wins\";\n\nconst Column = ({\n  score,\n  setScore,\n  players,\n  winner,\n  setWinner,\n  p1Moves,\n  p2Moves,\n  setP1Moves,\n  setP2Moves,\n  isDisabled,\n  setIsDisabled,\n  cellsOccupied,\n  setCellsOccupied,\n  currentCell,\n  setCurrentCell,\n  currentPlayer,\n  setCurrentPlayer,\n  animation,\n  setAnimation,\n}) => {\n  const player1 = \"X\";\n  const player2 = \"O\";\n\n  // Functions\n\n  // if array contains array\n  const compareArrays = (a, b) => {\n    let newArray = [];\n    for (let i = 0; i < b.length; i++) {\n      if (a.includes(b[i])) {\n        newArray.push(b[i]);\n      }\n    }\n    // if new array length is equal to b array length and new array elements is equal to b array, return true\n    if (newArray.length === b.length && newArray.every((v) => b.includes(v))) {\n      return true;\n    }\n    return false;\n  };\n\n  const cellPress = () => {\n    // Check if player has won\n    checkForWin();\n  };\n\n  const cellPressIn = (cellName) => {\n    // Check if cell is occupied\n    if (cellsOccupied.includes(cellName)) {\n      console.log(`${cellName} is occupied`);\n    } else {\n      // Let User Play in the cell then set the cell to occupied\n      setCurrentCell(cellName);\n      setCellsOccupied([...cellsOccupied, cellName]);\n      setCurrentPlayer(currentPlayer === player1 ? player2 : player1);\n\n      // Add move to player's move array\n      currentPlayer === player1\n        ? setP1Moves([...p1Moves, cellName])\n        : setP2Moves([...p2Moves, cellName]);\n    }\n\n    // Check if player has won\n    checkForWin();\n  };\n\n  const cellPressOut = () => {\n    checkForWin();\n  };\n\n  const checkForWin = () => {\n    // check if player 1 wins diagonally using compareArrays\n    if (p1Moves.length >= 2) {\n      if (\n        compareArrays(p1Moves, diagWinCase1) ||\n        compareArrays(p1Moves, diagWinCase2)\n      ) {\n        setWinner(players.p1);\n        Animated.timing(animation, {\n          toValue: 1,\n          duration: 2000,\n          useNativeDriver: false,\n        }).start();\n        setScore({\n          p1: score.p1 + 1,\n          p2: score.p2,\n        });\n        console.log(`Diag: ${players.p1} has won!`);\n        setIsDisabled(true);\n        return false;\n      }\n    }\n\n    // if player 2 wins diagonally\n    if (p2Moves.length >= 2) {\n      if (\n        compareArrays(p2Moves, diagWinCase1) ||\n        compareArrays(p2Moves, diagWinCase2)\n      ) {\n        setWinner(players.p2);\n        Animated.timing(animation, {\n          toValue: 1,\n          duration: 2000,\n          useNativeDriver: false,\n        }).start();\n        setScore({\n          p1: score.p1,\n          p2: score.p2 + 1,\n        });\n        console.log(`Diag: ${players.p2} has won!`);\n        setIsDisabled(true);\n        return false;\n      }\n    }\n\n    // if player 1 wins horizontally\n    if (p1Moves.length >= 2) {\n      if (\n        compareArrays(p1Moves, horWinCase1) ||\n        compareArrays(p1Moves, horWinCase2) ||\n        compareArrays(p1Moves, horWinCase3)\n      ) {\n        setWinner(players.p1);\n        Animated.timing(animation, {\n          toValue: 1,\n          duration: 2000,\n          useNativeDriver: false,\n        }).start();\n        setScore({\n          p1: score.p1 + 1,\n          p2: score.p2,\n        });\n        console.log(`Hor: ${players.p1} has won!`);\n        setIsDisabled(true);\n        return false;\n      }\n    }\n\n    // if player 2 wins horizontally\n    if (p2Moves.length >= 2) {\n      if (\n        compareArrays(p2Moves, horWinCase1) ||\n        compareArrays(p2Moves, horWinCase2) ||\n        compareArrays(p2Moves, horWinCase3)\n      ) {\n        setWinner(players.p2);\n        Animated.timing(animation, {\n          toValue: 1,\n          duration: 2000,\n          useNativeDriver: false,\n        }).start();\n        setScore({\n          p1: score.p1,\n          p2: score.p2 + 1,\n        });\n        console.log(`Hor: ${players.p2} has won!`);\n        setIsDisabled(true);\n        return false;\n      }\n    }\n\n    // if player 1 wins vertically\n    if (p1Moves.length >= 2) {\n      if (\n        compareArrays(p1Moves, vertWinCase1) ||\n        compareArrays(p1Moves, vertWinCase2) ||\n        compareArrays(p1Moves, vertWinCase3)\n      ) {\n        setWinner(players.p1);\n        Animated.timing(animation, {\n          toValue: 1,\n          duration: 2000,\n          useNativeDriver: false,\n        }).start();\n        setScore({\n          p1: score.p1 + 1,\n          p2: score.p2,\n        });\n        console.log(`Ver: ${players.p1} has won!`);\n        setIsDisabled(true);\n        return false;\n      }\n    }\n\n    // if player 2 wins vertically\n    if (p2Moves.length >= 2) {\n      if (\n        compareArrays(p2Moves, vertWinCase1) ||\n        compareArrays(p2Moves, vertWinCase2) ||\n        compareArrays(p2Moves, vertWinCase3)\n      ) {\n        setWinner(players.p2);\n        Animated.timing(animation, {\n          toValue: 1,\n          duration: 2000,\n          useNativeDriver: false,\n        }).start();\n        setScore({\n          p1: score.p1,\n          p2: score.p2 + 1,\n        });\n        console.log(`Ver: ${players.p2} has won!`);\n        setIsDisabled(true);\n        return false;\n      }\n    }\n\n    // if no one wins\n    if (p1Moves.length + p2Moves.length === 9) {\n      setWinner(\"Tie\");\n      Animated.timing(animation, {\n        toValue: 1,\n        duration: 1000,\n        useNativeDriver: false,\n      }).start();\n      setScore({\n        p1: \"Tie\",\n        p2: \"Tie\",\n      });\n      console.log(\"Tie!\");\n      setIsDisabled(true);\n    }\n  };\n\n  // console.log({\n  //   \"Player 1 Moves\": p1Moves,\n  //   \"Player 2 Moves\": p2Moves,\n  // });\n\n  const setInput = (cellName) => {\n    return p1Moves.includes(cellName)\n      ? \"X\"\n      : \"\" || p2Moves.includes(cellName)\n      ? \"O\"\n      : \"\";\n  };\n\n  // Dynamically set text color based on player turn\n  const setTextColor = (cellName) => {\n    return currentPlayer === player1\n      ? p1Moves.includes(cellName)\n        ? \"#00b0ffff\"\n        : \"#e0bad7ff\"\n      : p2Moves.includes(cellName)\n      ? \"#e0bad7ff\"\n      : \"#00b0ffff\";\n  };\n\n  // Dynamically change background color based on the winner\n  const setBoardColor = () => {\n    switch (winner) {\n      case players.p1:\n        return p1Wins;\n      case players.p2:\n        return p2Wins;\n      case \"Tie\":\n        return tie;\n\n      default:\n        return styles.container;\n    }\n  };\n\n  const p1Wins = {\n    backgroundColor: animation.interpolate({\n      inputRange: [0, 1],\n      outputRange: [\"rgba(224, 186, 215, 0)\", \"rgba(224, 186, 215, 1)\"],\n    }),\n    flexDirection: \"row\",\n    borderColor: animation.interpolate({\n      inputRange: [0, 1],\n      outputRange: [\"rgba(224, 186, 215, 0)\", \"rgba(224, 186, 215, 1)\"],\n    }),\n    borderRadius: 25 / 2,\n    // borderWidth: 25,\n  };\n  const p2Wins = {\n    backgroundColor: animation.interpolate({\n      inputRange: [0, 1],\n      outputRange: [\"rgba(0, 176, 255, 0)\", \"rgba(0, 176, 255, 1)\"],\n    }),\n    flexDirection: \"row\",\n    borderColor: animation.interpolate({\n      inputRange: [0, 1],\n      outputRange: [\"rgba(0, 176, 255, 0)\", \"rgba(0, 176, 255, 1)\"],\n    }),\n    borderRadius: 25 / 2,\n  };\n  const tie = {\n    backgroundColor: animation.interpolate({\n      inputRange: [0, 1],\n      outputRange: [\"rgba(136, 146, 176, 0)\", \"rgba(136, 146, 176, 1)\"],\n    }),\n    flexDirection: \"row\",\n    borderColor: animation.interpolate({\n      inputRange: [0, 1],\n      outputRange: [\"rgba(136, 146, 176, 0)\", \"rgba(136, 146, 176, 1)\"],\n    }),\n    borderRadius: 25 / 2,\n  };\n\n  return (\n    <Animated.View style={setBoardColor()}>\n      <View>\n        {\n          // Map LeftColumn to Cell components\n          LeftColumn.map((cellName, index) => {\n            return (\n              <Cell\n                key={index}\n                type={cellName}\n                onPress={() => cellPress()}\n                onPressIn={() => cellPressIn(cellName)}\n                onPressOut={() => cellPressOut()}\n                input={setInput(cellName)}\n                isDisabled={isDisabled}\n                textColor={setTextColor(cellName)}\n              />\n            );\n          })\n        }\n      </View>\n      <View>\n        {\n          // Map CenterColumn to Cell components\n          CenterColumn.map((cellName, index) => {\n            return (\n              <Cell\n                key={index}\n                type={cellName}\n                onPress={() => cellPress()}\n                onPressIn={() => cellPressIn(cellName)}\n                onPressOut={() => cellPressOut()}\n                input={setInput(cellName)}\n                isDisabled={isDisabled}\n                textColor={setTextColor(cellName)}\n              />\n            );\n          })\n        }\n      </View>\n      <View>\n        {\n          // Map RightColumn to Cell components\n          RightColumn.map((cellName, index) => {\n            return (\n              <Cell\n                key={index}\n                type={cellName}\n                onPress={() => cellPress()}\n                onPressIn={() => cellPressIn(cellName)}\n                onPressOut={() => cellPressOut()}\n                input={setInput(cellName)}\n                isDisabled={isDisabled}\n                textColor={setTextColor(cellName)}\n              />\n            );\n          })\n        }\n      </View>\n    </Animated.View>\n  );\n};\n\nexport default Column;\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: \"row\",\n  },\n});\n","import React, { useEffect, useState } from \"react\";\n\n// Dependencies\nimport {\n  StyleSheet,\n  Text,\n  View,\n  SafeAreaView,\n  Alert,\n  Button,\n  Animated,\n  Platform,\n  TouchableOpacity,\n} from \"react-native\";\nimport { AlertBox, fire } from \"react-native-alertbox\";\nimport Column from \"./Column\";\n\nconst GameBoard = () => {\n  const [p1, setP1] = useState(\"X\");\n  const [p2, setP2] = useState(\"O\");\n\n  const player1 = \"X\";\n\n  // State\n  const [currentPlayer, setCurrentPlayer] = useState(player1);\n  const [currentCell, setCurrentCell] = useState(\"\");\n  const [cellsOccupied, setCellsOccupied] = useState([]);\n  const [isDisabled, setIsDisabled] = useState(false);\n  const [animation, setAnimation] = useState(new Animated.Value(0));\n\n  // Player Move States\n  const [p1Moves, setP1Moves] = useState([]);\n  const [p2Moves, setP2Moves] = useState([]);\n\n  const [score, setScore] = useState({\n    p1: 0,\n    p2: 0,\n  });\n\n  const p1Score = score.p1;\n  const p2Score = score.p2;\n\n  const [winner, setWinner] = useState();\n\n  // Button for web only\n  const WebButton = ({ onPress }) => {\n    return (\n      <TouchableOpacity onPress={onPress}>\n        <Text style={styles.button}>Reset</Text>\n      </TouchableOpacity>\n    );\n  };\n\n  // Prompt for player 1\n  const promptPlayer1 = () => {\n    fire({\n      title: \"Let's Play!\",\n      message: \"What are your names?\",\n      // buttons\n      actions: [\n        {\n          text: \"Cancel\",\n          onPress: () => console.log(\"Cancel Pressed\"),\n        },\n        {\n          text: \"OK\",\n          onPress: (name) => {\n            setP1(name.player1);\n            setP2(name.player2);\n          },\n        },\n      ],\n      //fields\n      fields: [\n        {\n          name: \"player1\",\n          placeholder: \"Player 1 Enter your name\",\n          keyboardType: \"default\",\n        },\n        {\n          name: \"player2\",\n          placeholder: \"Player 2 Enter your name\",\n          keyboardType: \"default\",\n        },\n      ],\n    });\n  };\n\n  // Call Player  prompt on mount\n  useEffect(() => {\n    promptPlayer1();\n  }, []);\n\n  // Constantly check for winner\n  // useEffect(() => {\n  //   // Limit to 3 wins\n  //   if (score.p1 === 3) {\n  //     Alert.alert(\n  //       `${winner} won🙌🏿`,\n  //       `You beat ${p2}😔`,\n  //       [\n  //         {\n  //           text: \"Reset\",\n  //           onPress: () => resetGame(),\n  //           style: \"destructive\",\n  //         },\n  //       ],\n  //       { cancelable: false }\n  //     );\n  //   } else if (score.p2 === 3) {\n  //     Alert.alert(\n  //       `${winner} won🙌🏿`,\n  //       `You beat ${p1}😔`,\n  //       [\n  //         {\n  //           text: \"Reset\",\n  //           onPress: () => resetGame(),\n  //           style: \"destructive\",\n  //         },\n  //       ],\n  //       { cancelable: false }\n  //     );\n  //   }\n  // }, [score]);\n\n  // Reset Game\n  const resetGame = () => {\n    setScore({\n      p1: 0,\n      p2: 0,\n    });\n    setP1Moves([]);\n    setP2Moves([]);\n    setCellsOccupied([]);\n    setCurrentPlayer(player1);\n    setIsDisabled(false);\n    setWinner();\n    setIsDisabled(false);\n    setAnimation(new Animated.Value(0));\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <AlertBox />\n      <View\n        style={{\n          flexDirection: \"row\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          borderBottomWidth: 1,\n          borderBottomColor: \"#fff\",\n          padding: 10,\n        }}\n      >\n        <Text style={[{ color: \"#00b0ffff\" }, styles.score]}>\n          {p1} {p1Score}\n        </Text>\n        <Text style={[{ color: \"#fff\" }, styles.score]}>- </Text>\n        <Text style={[{ color: \"#e0bad7ff\" }, styles.score]}>\n          {p2Score} {p2}\n        </Text>\n      </View>\n      {/* G */}\n\n      <View\n        style={{\n          flex: 1,\n          justifyContent: \"space-around\",\n          alignItems: \"center\",\n        }}\n      >\n        <Column\n          score={score}\n          setScore={setScore}\n          players={{\n            p1,\n            p2,\n          }}\n          winner={winner}\n          setWinner={setWinner}\n          currentPlayer={currentPlayer}\n          setCurrentPlayer={setCurrentPlayer}\n          currentCell={currentCell}\n          setCurrentCell={setCurrentCell}\n          cellsOccupied={cellsOccupied}\n          setCellsOccupied={setCellsOccupied}\n          isDisabled={isDisabled}\n          setIsDisabled={setIsDisabled}\n          p1Moves={p1Moves}\n          setP1Moves={setP1Moves}\n          p2Moves={p2Moves}\n          setP2Moves={setP2Moves}\n          animation={animation}\n          setAnimation={setAnimation}\n        />\n      </View>\n      {winner && (\n        <View\n          style={{\n            flexDirection: \"row\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            borderBottomWidth: 0.5,\n            borderBottomColor: winnerColor(winner),\n            borderTopWidth: 1,\n            borderTopColor: winnerColor(winner),\n            padding: 10,\n            backgroundColor: winnerColor(winner),\n            // top: 0,\n          }}\n        >\n          <Text style={styles.winner}>\n            {winner === \"Tie\" ? \"Tie Game!\" : `${winner} is the winner!`}\n          </Text>\n        </View>\n      )}\n      {/* Reset Button */}\n      <View\n        style={{\n          flexDirection: \"row\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          borderTopWidth: 0.5,\n          borderTopColor: winnerColor(winner),\n          paddingBottom: 10,\n          // top: 0,\n        }}\n      >\n        {Platform.OS === \"web\" ? (\n          <WebButton onPress={resetGame} />\n        ) : (\n          <Button title=\"Reset\" onPress={() => resetGame()} />\n        )}\n      </View>\n    </SafeAreaView>\n  );\n};\n\nconst winnerColor = (winner) => {\n  switch (winner) {\n    case \"X\":\n      return \"#00b0ffff\";\n\n    case \"O\":\n      return \"#e0bad7ff\";\n\n    case \"Tie\":\n      return \"#8892b0\";\n\n    default:\n      return \"#fff\";\n  }\n};\n\nexport default GameBoard;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#000\",\n    flexDirection: \"column\",\n    alignContent: \"space-around\",\n  },\n  score: {\n    fontSize: 30,\n    fontFamily: \"MontserratLight\",\n    textAlign: \"center\",\n  },\n  alert: {\n    color: \"lightgreen\",\n    fontSize: 30,\n    fontFamily: \"MontserratLight\",\n    textAlign: \"center\",\n  },\n  winner: {\n    color: \"#000\",\n    fontSize: 30,\n    fontFamily: \"MontserratLight\",\n    textAlign: \"center\",\n    paddingBottom: 10,\n  },\n  button: {\n    color: \"#007aff\",\n    textAlign: \"center\",\n    margin: 8,\n    fontSize: 18,\n  },\n});\n","import React from \"react\";\n\n// Dependencies\nimport { SafeAreaView, StyleSheet } from \"react-native\";\nimport GameBoard from \"./GameBoard\";\n\nconst GameContainer = () => {\n  return (\n    <SafeAreaView style={styles.container}>\n      <GameBoard />\n    </SafeAreaView>\n  );\n};\n\nexport default GameContainer;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#000\",\n  },\n});\n","import React from \"react\";\n\n// Dependencies\nimport { useFonts } from \"expo-font\";\n\nimport GameContainer from \"./src/components/GameContainer\";\n\nconst App = () => {\n  const [fontsLoaded] = useFonts({\n    MontserratBold: require(\"./assets/fonts/Montserrat-Bold.ttf\"),\n    MontserratLight: require(\"./assets/fonts/Montserrat-Light.ttf\"),\n  });\n\n  if (!fontsLoaded) {\n    return null;\n  }\n\n  return <GameContainer />;\n};\n\nexport default App;\n","module.exports = __webpack_public_path__ + \"./fonts/Montserrat-Bold.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/Montserrat-Light.ttf\";"],"sourceRoot":""}